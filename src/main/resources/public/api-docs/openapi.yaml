openapi: "3.0.1"

info:
  title: parkor-pricing
  version: "0.1"
  description: |
    Provides endpoints for getting parking rates for given time windows.

servers:
  - url: http://localhost:8080

paths:
  /rates:
    get:
      operationId: getRate
      summary: Get parking rates
      description: |
        Get the rate that will be charged per hour for parking during the
        specified window.

        The start date must precede the end date.

        Requests that span multiple days are not supported.

      parameters:
        - name: start
          in: query
          required: true
          description: |
            The date-time for the start of this window.
          schema:
            $ref: '#/components/schemas/IsoDateTime'
          example: '2018-08-16T02:19:04.878Z'

        - name: end
          in: query
          required: true
          description: |
            The date-time for the start of this window.
          schema:
            $ref: '#/components/schemas/IsoDateTime'
          example: '2018-08-16T02:19:04.878Z'

      responses:
        '200':
          description: |
            Response describing the hourly rate for the given window.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RateResponse'

            application/xml:
              schema:
                $ref: '#/components/schemas/RateResponse'

        '400':
          description: |
            Returned if the date range is invalid or unsupported.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidDateRangeError'

components:
  schemas:
    IsoDateTime:
      description: |
        A UTC date-time in ISO-8601 format.
      type: string
      format: date-time

    RateResponse:
      properties:
        rate:
          description: |
            The hourly rate that would be charged for the given time window.

            If parking is unavailable for the specified time window, `rate` will
            be null.
          type: integer
          nullable: true

    RateError:
      properties:
        error:
          type: object
          schema:
            oneOf:
            InvalidDateRangeError:
              type: object

    Unsupported